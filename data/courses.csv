CS1110;;;Introduction to Computing Using Python;;;4;;;Fall, spring, summer.;;;;;; Assumes basic high school mathematics (no calculus) but no programming experience.;;;Programming and problem solving using Python. Emphasizes principles of software development, style, and testing. Topics include procedures and functions, iteration, recusion, arrays and vectors, strings, an operational model of procedure and function calls, algorithms, exceptions, object-oriented programming, and GUIs (graphical user interfaces). Weekly labs provide guided practice on the computer, with staff present to help. Assignments use graphics and GUIs to help develop fluency and understanding.
CS1112;;;Introduction to Computing Using MATLAB;;;4;;;Fall, spring.;;;;;; Corequisite: MATH 1110, MATH 1910, or equivalent. Assumes student is comfortable with mathematics (at level of one semester of calculus) but has no prior programming experience.;;;Programming and problem solving using MATLAB. Emphasizes the systematic development of algorithms and programs. Topics include iteration, functions, arrays, recursion, object-oriented programming, and MATLAB graphics. Assignments are designed to build an appreciation for complexity, dimension, fuzzy data, inexact arithmetic, randomness, simulation, and the role of approximation.
CS1130;;;Transition to Object-Oriented Programming;;;1;;;;;;;;;;;;
CS1132;;;Transition to MATLAB;;;1;;;Fall, spring.;;;;;; Prerequisite: one course in programming.;;;Introduction to MATLAB and scientific computing. Covers the MATLAB environment, assignment, conditionals, iteration, scripts, functions, arrays, scientific graphics, and vectorized computation. Assumes programming knowledge in a language like Java, C, C++, or Fortran.
CS1133;;;Transition to Python;;;1;;;Fall.;;;;;;;;;Introduction to the Python programming language. Covers the basic programming constructs of Python, including assignment, conditionals, iteration, functions, object-oriented design, arrays, and vectorized computation. Assumes programming knowledge in a language like Java, Matlab, C, C++, or Fortran. 
CS1142;;;Introduction to MATLAB;;;2;;;Fall, spring.;;;;;; Corequisite: MATH 1110, MATH 1910, or equivalent. No programming experience assumed.;;;Introduction to elementary computer programming concepts using MATLAB. Topics include problem analysis, development of algorithms, selection, iteration, functions, and arrays. Examples and assignments are chosen to build an appreciation for computational science. The goal is for each student to develop a facility with MATLAB that will be useful in other courses whenever there is a need for computer problem solving or visualization.
CS1300;;;Introductory Design and Programming for the Web;;;3;;;Fall.;;;;;;;;;The World Wide Web is both a technology and a pervasive and powerful resource in our society and culture. To build functional and effective web sites, students need technical and design skills as well as analytical skills for understanding who is using the web, in what ways they are using it, and for what purposes. In this course, students develop skills in all three of these areas through the use of technologies such as XHTML, Cascading Stylesheets, and PHP. Students study how web sites are deployed and used, usability issues on the web, user-centered design, and methods for visual layout and information architecture. Through the web, this course provides an introduction to the interdisciplinary field of information science.
CS1610;;;Computing in the Arts;;;3;;;Spring.;;;;;; Recommended prerequisite: good comfort level with computers and some of the arts.;;;Over the centuries, artists in a wide variety of media have employed many approaches to the creative process, ranging from the philosophical to the mechanical to the virtual. This course unravels some of the mysteries going on inside software used for art and music. It looks at ways of breaking things apart and sampling and ways of putting things together and resynthesizing, and explores ideas for creation. This course does not teach software packages for creating art and music. The course complements ART 2701 and MUSIC 1421.
CS1620;;;Visual Imaging in the Electronic Age;;;4;;;Fall.;;;;;;;;;Interdisciplinary survey course designed to introduce students in the creative arts, science, and engineering to the concepts of 2D and 3D digital pictorial representation and display. It is a concept course that concentrates on "why" rather than "how." Topics include perspective representations, display technology, how television works, bandwidth concepts, digital photography, computer graphics modeling and rendering, color perception, 3D data acquisition, volumetric imaging, and historical precedents, primarily from the art world.
CS1710;;;Introduction to Cognitive Science;;;3-4;;;;;;;;;;;;
CS2024;;;C++ Programming;;;2;;;Fall.;;;;;; Prerequisite: one programming course or equivalent programming experience. Students who plan to take CS 2022 and 2024 must takeCS 2022 first.;;;An intermediate introduction to the C++ programming language and the C/C++ standard libraries. Topics include basic statements, declarations, and types; stream I/O; user-defined classes and types; derived classes, inheritance, and object-oriented programming; exceptions and templates. Recommended for students who plan to take advanced courses in computer science that require familiarity with C++ or C. Students planning to take CS 2024 normally do not need to take CS 2022; 2024 includes most of the material taught in CS 2022.
CS2043;;;UNIX Tools and Scripting;;;2;;;Spring. (Weeks 1-6);;;;;; Prerequisite: one programming course or equivalent programming experience. No previous knowledge of UNIX or expertise in any particular language is assumed.;;;UNIX and UNIX-like systems are increasingly being used on personal computers, mobile phones, web servers, and many other systems. They represent a wonderful family of programming environments useful both to computer scientists and to people in many other fields, such as computational biology and computational linguistics, in which data is naturally represented by strings. This course takes students from shell basics and piping, to regular-expression processing tools, to shell scripting and Python. Other topics to be covered include handling concurrent and remote resources, manipulating streams and files, and managing software installations.
CS2048;;;Introduction to iPhone App Development;;;1;;;;;;;;;;;;No description available.
CS2049;;;Intermediate iPhone App Development;;;1;;;;;;;;;;;;No description available.
CS2110;;;Object-Oriented Programming and Data Structures;;;3;;;Fall, spring, summer.;;;;;; Prerequisite:CS 1110    or CS 1130 or CS 1112 (taken Fall 2012 or later) or CS 1114 (taken Fall 2012 or later) or CS 1115 or equivalent course on object-oriented programming.;;;Intermediate programming in a high-level language and introduction to computer science. Topics include program structure and organization, object-oriented programming (classes, objects, types, sub-typing), graphical user interfaces, algorithm analysis (asymptotic complexity, big "O" notation), recursion, data structures (lists, trees, stacks, queues, heaps, search trees, hash tables, graphs), simple graph algorithms. Java is the principal programming language.
CS2111;;;Programming Practicum;;;1;;;Fall, spring.;;;;;; Corequisite: CS 2110.;;;Meets weekly for one hour, in collaboration with CS 2110. Designed to enhance understanding of object-oriented programming, use of the application for writing Java programs, and other programming issues, as well as theoretical concepts that arise in CS 2110. The hour is spent in ways appropriate to the material under study -lecture, question-answer session, problem solving in small groups, one-on-one help, etc.
CS2112;;;Object-Oriented Design and Data Structures - Honors;;;4;;;Spring.;;;;;; Prerequisite: very good performance in CS 1110or CS 1130or equivalent course in Java or C++, or permission of the instructor.;;;Honors version of CS 2110/ENGRD 2110; credit is given for only one of CS 2110and 2112. Corrective transfer between CS 2110and 2112 (in either direction) is encouraged during first three weeks. Intermediate software design and introduction to key computer science ideas. Topics are similar to those in CS 2110but are covered in greater depth, with more challenging assignments. Topics include object-oriented programming, program structure and organization, program reasoning using specifications and invariants, recursion, design patterns, concurrent programming, graphical user interfaces, data structures as in CS 2110, sorting and graph algorithms, asymptotic complexity, and simple algorithm analysis. Java is the principal programming language.
CS2300;;;Intermediate Design and Programming for the Web;;;3;;;Spring.;;;;;; Prerequisite: CS 1300 strongly recommended. Must be taken before CS 3300.;;;Web programming requires the cooperation of two machines: the one in front of the viewer (client) and the one delivering the content (server).INFO 1300concentrates almost exclusively on the client side. The main emphasis in INFO 2300 is learning about server side processing. Students begin with a short overview of the PHP server-side scripting language, then look at interactions with databases, learning about querying via the database language SQL. Through a succession of projects, students learn how to apply this understanding to the creation of an interactive, data-driven site via PHP and the MYSQL database. Also considered are technologies such as Javascript and Ajax and techniques to enhance security and privacy. Design and usability issues are emphasized. A major component of the course is the creation of a substantial web site.
CS2770;;;Excursions in Computational Sustainability;;;3;;;Spring.;;; (CU-SBY);;; Prerequisite: students are expected to have basic knowledge of probability theory and calculus.;;;Balancing environmental, economic, and societal needs for a sustainable future encompasses problems of unprecedented size and complexity. Computing and information science can play an important role in addressing critical sustainability challenges faced by present and future generations. The goal of the course is to introduce students to a range of sustainability challenges and to computational methods that can help address such challenges. Sustainability topics include sustainable development, biodiversity and wildlife conservation, poverty mitigation, food security, renewable resources, energy, transportation, and climate change. In the context of these sustainability topics, the course will introduce students to mathematical and computational modeling techniques, algorithms, and statistical methods. The course is at the introductory undergraduate level. Students are expected to have basic knowledge of probability theory and calculus.
CS2800;;;Discrete Structures;;;3;;;Fall, spring.;;;;;; Prerequisite or corequisite: one programming course or permission of instructor.;;;Covers the mathematics that underlies most of computer science. Topics include mathematical induction; logical proof; propositional and predicate calculus; combinatorics and discrete mathematics; some basic elements of basic probability theory; basic number theory; sets, functions, and relations; graphs; and finite-state machines. These topics are discussed in the context of applications to many areas of computer science, such as the RSA cryptosystem and web searching.
CS2850;;;Networks;;;4;;;Fall.;;;;;;;;;This interdisciplinary course examines network structures and how they matter in everyday life. The course examines how each of the computing, economic, sociological and natural worlds are connected and how the structure of these connections affects each of these worlds. Tools of graph theory and game theory are taught and then used to analyze networks. Topics covered include the web, the small world phenomenon, markets, neural networks, contagion, search and the evolution of networks.
CS3110;;;Data Structures and Functional Programming;;;4;;;Fall, spring.;;;;;; Prerequisite: CS 2110 or equivalent programming experience. Prerequisite or corequisite: CS 2800. Should not be taken concurrently with CS 3410 or CS 3420.;;;Advanced programming course that emphasizes functional programming techniques and data structures. Programming topics include recursive and higher-order procedures, models of programming language evaluation and compilation, type systems, and polymorphism. Data structures and algorithms covered include graph algorithms, balanced trees, memory heaps, and garbage collection. Also covers techniques for analyzing program performance and correctness.
CS3152;;;Introduction to Computer Game Architecture;;;4;;;Spring.;;;;;; Prerequisite: CS 2110.;;;A project-based course in which programmers and designers collaborate to make a computer game. This course investigates the theory and practice of developing computer games from a blend of technical, aesthetic, and cultural perspectives. Technical aspects of game architecture include software engineering, artificial intelligence, game physics, computer graphics, and networking. Aesthetic and cultural include art and modeling, sound and music, game balance, and player experience.
CS3300;;;Data-Driven Web Applications;;;3;;;Spring.;;;;;; Prerequisite: CS 2110/ENGRD 2110 and CS 2300 or permission of instructor.;;;This course will introduce students to working with data in the context of modern web applications. These include data representation with relational and non-relational databases, data mining to find patterns and make predictions, and graphical presentation for visualization.
CS3410;;;Computer System Organization and Programming;;;4;;;Spring.;;;;;; Prerequisite: CS 2110 or equivalent programming experience is required. Recommended prerequisite: CS 2022   or CS 2024.;;;Introduction to computer organization, systems programming and the hardware/ software interface. Topics include instruction sets, computer arithmetic, datapath design, data formats, addressing modes, memory hierarchies including caches and virtual memory, I/O devices, bus-based I/O systems, and multicore architectures. Students learn assembly language programming and design a pipelined RISC processor.
CS3420;;;Embedded Systems;;;4;;;Spring.;;;;;; Prerequisite: ENGRD 2300.;;;An introduction to the design of embedded systems, with an emphasis on understanding the interaction between hardware, software, and the physical world. Topics covered include assembly language programming, interrupts, I/O, concurrency management, scheduling, resource management, and real-time constraints.
CS3758;;;Autonomous Mobile Robots;;;3;;;Spring.;;;;;; Prerequisite: MATLAB programming  or permission of instructor.;;;Creating robots capable of performing complex tasks autonomously requires one to address a variety of different challenges such as sensing, perception, control, planning, mechanical design, and interaction with humans. In recent years many advances have been made toward creating such systems, both in the research community (different robot challenges and competitions) and in industry (industrial, military, and domestic robots). This course gives an overview of the challenges and techniques used for creating autonomous mobile robots. Topics include sensing, localization, mapping, path planning, motion planning, obstacle and collision avoidance, and multi-robot control.
CS4090;;;Teaching Experience in Computer Science;;;1-4;;;Fall, spring.;;;;;;;;;Earn course credit for working as a consultant or ugrad TA in a computer science course.
CS4110;;;Programming Languages and Logics;;;4;;;Spring.;;;;;; Prerequisite: CS 3110 or permission of instructor.;;;An introduction to the theory, design, and implementation of programming languages. Topics include operational semantics, type systems, higher-order functions, scope, lambda calculus, laziness, exceptions, side effects, continuations, objects, and modules. Also discussed are logic programming, concurrency, and distributed programming.
CS4152;;;Advanced Topics in Computer Game Architecture;;;3;;;Spring.;;;;;; Prerequisites: CS 3152and one of the following: CS 3300, CS 4620, CS 4700, CS 4758, CS 5414.;;;Project-based follow-up course to CS 3152. Students work in a multidisciplinary team to develop a game that incorporates innovative game technology. Advanced topics include 3D game development, mobile platforms, multiplayer gaming, and nontraditional input devices. There is a special emphasis on developing games that can be submitted to festivals and competitions.
CS4154;;;Analytics-driven Game Design;;;3;;;;;;;;;;;;No description available.
CS4210;;;Numerical Analysis and Differential Equations;;;4;;;Fall.;;;;;; Prerequisites: MATH 2210 or MATH 2940 or equivalent, one additional mathematics course numbered 3000 or above, and knowledge of programming.;;;Introduction to the fundamentals of numerical analysis: error analysis, approximation, interpolation, numerical integration. In the second half of the course, the above are used to build approximate solvers for ordinary and partial differential equations. Strong emphasis is placed on understanding the advantages, disadvantages, and limits of applicability for all the covered techniques. Computer programming is required to test the theoretical concepts throughout the course.
CS4220;;;Numerical Analysis: Linear and Nonlinear Problems;;;4;;;Spring.;;;;;; Prerequisites: MATH 2210 or MATH 2940 or equivalent, one additional mathematics course numbered 3000 or above, and knowledge of programming.;;;Introduction to the fundamentals of numerical linear algebra: direct and iterative methods for linear systems, eigenvalue problems, singular value decomposition. In the second half of the course, the above are used to build iterative methods for nonlinear systems and for multivariate optimization. Strong emphasis is placed on understanding the advantages, disadvantages, and limits of applicability for all the covered techniques. Computer programming is required to test the theoretical concepts throughout the course.
CS4300;;;Information Retrieval;;;3;;;Fall.;;;;;; Prerequisite: CS 2110 or equivalent.;;;Studies the methods used to search for and discover information in large-scale systems. The emphasis is on information retrieval applied to textual materials, but there is some discussion of other formats. The course includes techniques for searching, browsing, and filtering information and the use of classification systems and thesauruses. The techniques are illustrated with examples from web searching and digital libraries.
CS4320;;;Introduction to Database Systems;;;3;;;Fall.;;;;;; Prerequisites: CS 3110 or CS 2110 and permission of instructor.;;;Introduction to modern database systems. Concepts covered include storage structures, access methods, query languages, query processing and optimization, transaction management, recovery, database design, XML, and XQuery. The course focuses on the design and internals of modern database systems.
CS4321;;;Practicum in Database Systems;;;2;;;Fall.;;;;;; Prerequisite or corequisite: CS 4320.;;;Students build part of a real database system in C++.
CS4410;;;Operating Systems;;;3;;;Fall.;;;;;; Prerequisite: CS 3410 or CS 3420.;;;Introduction to the design of systems programs, with emphasis on multiprogrammed operating systems. Topics include concurrency, synchronization, deadlocks, memory management, protection, input-output methods, networking, file systems and security. The impact of network and distributed computing environments on operating systems is also discussed.
CS4411;;;Practicum in Operating Systems;;;2;;;Fall.;;;;;; Corequisite: CS 4410.;;;Studies the practical aspects of operating systems through the design and implementation of an operating system kernel that supports multiprogramming, virtual memory, and various input-output devices. All the programming for the project is in a high-level language.
CS4420;;;Computer Architecture;;;4;;;Fall.;;;;;; Prerequisites: CS 3420/ECE 3140 or CS 3410.;;;This course aims to provide a strong foundation for students to understand modern computer system architecture and to apply these insights and principles to future computer designs. The course is structured around the three primary building blocks of general-purpose computing systems: processors, memories, and networks. The first half of the course focuses on the fundamentals of each building block. Topics include processor microcoding and pipelining; cache microarchitecture and optimization; and network topology, routing, and flow control. The second half of the course delves into more advanced techniques and will enable students to understand how these three building blocks can be integrated to build a modern shared-memory multicore system. Topics include superscalar execution, branch prediction, out-of-order execution, register renaming and memory disambiguation; VLIW, vector, and multithreaded processors; memory protection, translation, and virtualization; and memory synchronization, consistency, and coherence. This course includes a significant project decomposed into five lab assignments. Throughout the semester, students will gradually design, implement, test, and evaluate a complete multicore system capable of running real parallel applications at the register-transfer level.
CS4620;;;Introduction to Computer Graphics;;;3;;;Fall.;;;;;; Prerequisite: CS 2110/ENGRD 2110.;;;Introduction to the principles of computer graphics in two and three dimensions. Topics include digital images, filtering and antialiasing, 2-D and 3-D affine geometry, ray tracing, perspective and 3-D viewing, the graphics pipeline, curves and surfaces, and human visual perception. Homework assignments require some Java programming. May be taken with or without concurrent enrollment in CS 4621.
CS4621;;;Computer Graphics Practicum;;;2;;;Fall.;;;;;; Prerequisite or corequisite: CS 4620.;;;Provides CS 4620 students with hands-on experience in computer graphics programming on modern graphics hardware. A semester-long project involves building a substantial interactive 3D system. The course uses Java and OpenGL for code development.
CS4670;;;Introduction to Computer Vision;;;4;;;Spring.;;;;;; Prerequisites: CS 2110, CS 2800.;;;An in-depth introduction to computer vision. The goal of computer vision is to compute properties of our world-the 3D shape of an environment, the motion of objects, the names of people or things-through analysis of digital images or videos. The course covers a range of topics, including 3D reconstruction, image segmentation, object recognition, and vision algorithms for the Internet, as well as key algorithmic and optimization techniques, such as graph cuts and non-linear least squares. This course emphasizes hands-on experience with computer vision, with several large programming projects.
CS4700;;;Foundations of Artificial Intelligence;;;3;;;;;;;;;;;;
CS4701;;;Practicum in Artificial Intelligence;;;2;;;Fall.;;;;;; Prerequisite or corequisite: CS 4700.;;;Project portion of CS 4700. Topics include knowledge representation systems, search procedures, game-playing, automated reasoning, concept learning, reinforcement learning, neural nets, genetics algorithms, planning, and truth maintenance.
CS4740;;;Introduction to Natural Language Processing;;;4;;;Spring.;;;;;; Prerequisite: CS 2110.;;;Computationally oriented introduction to natural language processing, the goal of which is to enable computers to use human languages as input, output, or both. Possible topics include parsing, grammar induction, information retrieval, and machine translation.
CS4744;;;Computational Linguistics;;;4;;;Fall.;;;;;; Prerequisite: CS 2800  or LING 3302  or LING 3303, or permission of instructor.;;;Computational models of natural languages. Topics include tree syntax and treebank databases; broad-coverage probabilistic grammars; finite state generative phonology; computational semantics; computational minimalist grammar; finite state optimality-theoretic phonology; Hidden Markov models of acoustic realization; text and speech corpora; lab methods in Unix/Linux environment.
CS4752;;;Robotic Manipulation;;;4;;;;;;;;;;;;No description available.
CS4780;;;Machine Learning;;;4;;;Fall.;;;;;; Prerequisite: CS 2110/ENGRD 2110  or CS 2112/ENGRD 2112  and CS 2800, or basic probability theory, and basic knowledge of linear algebra.;;;Introduces the fundamental set of techniques and algorithms that constitute machine learning as of today.
CS4786;;;Machine Learning for Data Science;;;4;;;;;;;;;;;;No description available.
CS4820;;;Introduction to Analysis of Algorithms;;;4;;;;;;;;;;;;
CS4840;;;Algorithms for Markets;;;4;;;;;;;;;;;;No description available.
CS4850;;;Mathematical Foundations for the Information Age;;;4;;;Spring.;;;;;; Prerequisites: CS 2800 , MATH 1910  and MATH 1920.;;;Covers the mathematical foundations for access to information. Topics include high dimensional space, random graphs, singular value decomposition, Markov processes, learning theory, and algorithms for massive data.
CS4852;;;Networks II;;;3;;;;;;;;;;;;Networks II builds on its prerequisite course and continues to examine how each of the computing, economic, sociological and natural worlds are connected and how the structure of these connections affects these worlds. In this course, we will construct mathematical models for and analyze networked settings, allowing us to both make predictions about behavior in such systems, as well as reason about how to design such systems to exhibit some desirable behavior. Throughout, we will draw on real-world examples such as social networks, peer-to-peer filesharing, Internet markets, and crowdsourcing, that illustrate these phenomena.
CS4860;;;Applied Logic;;;4;;;Spring.;;;;;; Prerequisites: MATH 2210-MATH 2220, MATH 2230-MATH 2240, or MATH 1920 and MATH 2940; CS 2800 (or MATH 3320, MATH 3360, MATH 4320, MATH 4340, or MATH 4810); and some additional course in mathematics or theoretical computer science.;;;Propositional and predicate logic, compactness and completeness by tableaux, natural deduction, and resolution. Equational logic. Herbrand Universes and unification. Rewrite rules and equational logic, Knuth-Bendix method, and the congruence-closure algorithm and lambda-calculus reduction strategies. Topics in Prolog, LISP, ML, or Nuprl. Applications to expert systems and program verification.
CS4999;;;Independent Reading and Research;;;1-4;;;Fall, spring.;;;;;;;;;Independent reading and research for undergraduates.
CS5091;;;Conversations in the Studio;;;1;;;;;;;;;;;;
CS5092;;;Entrepreneurial Lens;;;1;;;Fall, spring.;;;;;;;;;This practicum helps students develop their ability to imagine and recognize entrepreneurial opportunities. Over the course of the semester, students invent and explore hundreds of product ideas, and, by the end of the practicum, self-organize into co-founding teams around specific product ideas that they will execute on as their Startup Projects the following semester.
CS5110;;;Programming Languages and Logics;;;4;;;Spring.;;;;;; Prerequisite: CS 3110or permission of instructor.;;;An introduction to the theory, design, and implementation of programming languages. Topics include operational semantics, type systems, higher-order functions, scope, lambda calculus, laziness, exceptions, side effects, continuations, objects, and modules. Also discussed are logic programming, concurrency, and distributed programming.
CS5150;;;Software Engineering;;;4;;;Fall.;;;;;; Prerequisite: CS 2110 or equivalent experience programming in Java or C++.;;;Introduction to the practical problems of specifying, designing, and building large, reliable software systems. Students work in teams on projects for real clients. This work includes a feasibility study, requirements analysis, object-oriented design, implementation, testing, and delivery to the client. Additional topics covered in lectures include professionalism, project management, and the legal framework for software development.
CS5152;;;Open-Source Software Engineering;;;4;;;;;;;;;;;;
CS5191;;;Studio;;;1;;;Fall, spring.;;;;;;;;;While most courses focus on what to build, this practicum focuses on how to build. Each week, students bring whatever projects or assignments they are currently coding in their other courses, and faculty and guest practitioners provide instruction, review, and feedback to improve the quality of their code. Students complete the practicum with a better understanding of real-world standards of code quality.
CS5223;;;Numerical Analysis: Linear and Nonlinear Problems;;;4;;;Spring.;;;;;; Prerequisites: MATH 2210or MATH 2940or equivalent, one additional mathematics course numbered 3000 or above, and knowledge of programming.;;;Introduction to the fundamentals of numerical linear algebra: direct and iterative methods for linear systems, eigenvalue problems, singular value decomposition. In the second half of the course, the above are used to build iterative methods for nonlinear systems and for multivariate optimization. Strong emphasis is placed on understanding the advantages, disadvantages, and limits of applicability for all the covered techniques. Computer programming is required to test the theoretical concepts throughout the course.
CS5300;;;The Architecture of Large - Scale Information Systems;;;4;;;Spring.;;;;;; Prerequisite: CS 3300/INFO 3300 or CS 4320.;;;Deals with the architecture of large-scale information systems, with special emphasis on Internet-based systems. Topics include three-tier architectures, edge caches, distributed transaction management, web services, workflows, performance scalability, and high-availability architectures. The course includes a substantial project in the context of three-tier architectures, involving web servers, application servers, and database systems. Students study and use technologies such as Web Services, .Net, J2EE, ASPs, Servlets, XML, and SOAP.
CS5320;;;Introduction to Database Systems;;;3;;;Fall.;;;;;; Prequisites: CS 3110(or CS 2110and permission of instructor).;;;Introduction to modern database systems. Concepts covered include storage structures, access methods, query languages, query processing and optimization, transaction management, recovery, database design, XML, and XQuery. The course focuses on the design and internals of modern database systems.
CS5321;;;Practicum in Database Systems;;;2;;;Fall.;;;;;; Prerequisite or corequisite: CS 5320.;;;For description, see CS 4321.
CS5356;;;Building Startup Systems;;;3;;;Fall.;;;;;; Prerequisite: CS 2110or CS 2112.;;;This course aims to bridge the gap between academic studies of computer science and production software engineering. The course provides a fast-paced introduction to key tools and techniques that can facilitate the building of prototypes and of actual working systems. It introduces technologies for building Web applications and mobile applications, systems for effective storage of data, and tools that support and ease code writing, such as distributed version-control systems, editors and debuggers.
CS5412;;;Cloud Computing;;;4;;;Spring.;;;;;; Prerequisite: CS 4410 or permission of instructor.;;;Focuses on cloud computing, large-scale Internet applications, and other practical issues in designing and implementing trustworthy, scalable distributed software.
CS5413;;;High Performance Systems and Networking;;;4;;;Fall.;;;;;; Prerequisites: CS 4410  and CS 4411, or equivalent.;;;This course broadly examines high performance systems and networks.  It especially covers systems and networks built from low cost commodity components like modern datacenters that provide platforms for cloud and other online services.  It teaches abstractions, design, and implementation techniques that allow students to build the kind of scalable high performance systems and networks that can deal with real-world cloud workloads.  Students study high performance designs and implementations: They create projects related to operating systems kernel and driver designs and implementations on the systems side and network medium, protocol, and topology designs on the networking side. The key is that students immerse themselves in state-of-the-art systems and networks, produce a few small course projects and a final project, and gain an understanding necessary to build highly available, reliable, and performant systems and networks while relying mainly on low cost, commodity components.
CS5420;;;Advanced Computer Architecture;;;4;;;Fall.;;;;;; Prerequisite: ECE 4750 or CS 4420.;;;This course discusses advanced topics and recent developments in computerarchitecture beyond the traditional microprocessors that are covered in undergraduate courses such as ECE4750. In particular, the course places special focus on domain-specific and reconfigurable architectures such as Field Programmable Gate Arrays (FPGAs), Graphics Processing Units (GPUs), and Digital Signal Processors (DSP),and trust issues inmicroprocessor designs such as security, reliability, and design verification.
CS5422;;;Physical Computing;;;4;;;;;;;;;;;;No description available.
CS5430;;;System Security;;;4;;;Spring.;;;;;; Prerequisites: CS 4410 and familiarity with Java, C, or C# programming languages.;;;Discusses security and survivability for computers and communications networks. Includes discussions of policy issues (e.g., the national debates on cryptography policy) as well as discussions of the technical alternatives for implementing the properties that comprise "trustworthiness" in a computing system. Covers mechanisms for authorization and authentication as well as cryptographic protocols.
CS5434;;;Defending Computer Networks;;;4;;;Fall or spring.;;;;;; Prerequisite: CS 2022or equivalent, CS 3410or equivalent, CS 4410or equivalent.;;;We discuss attacks on operational computer networks, with a focus on how to prevent them, or detect them if we fail to prevent them; we study the reasons why real-world software tends to be vulnerable and how attackers exploit those vulnerabilities; we talk about the lifecycle of network attacks - methods of reconnaissance, gaining control of bulk volumes of computers via scanning, by worms, or by client-side attacks such as drive-by downloads from malicious websites; discuss the control of the resulting botnets of computers and the motives of attackers such as criminal syndicates and intelligence agencies; cover network-level defenses such as firewalls, encryption and virtual private networks; cover technical approaches for detecting attacks both on the network and on the host; talk about legal and ethical issues for network defenders.
CS5435;;;Security and Privacy Concepts in the Wild;;;4;;;Fall.;;;;;; Prerequisite: CS 2800or CS 4820or permission of instructor.;;;Through their influence in systems ranging from automobiles to implantable medical devices to social networks, computer security and privacy touch our lives in ever more diverse and palpable ways. In this course, students explore select topics, both social ones such as the ethics of hacking, and technical ones, such as the use of cryptography. Students seek to understand these concepts in the wild through the study of current events, products and services, and startup ideas. The focus of the course is less on specific skills than on a technical and social understanding of how and why security and privacy matter, how to think adversarially, and how (and how not) to design systems and products.
CS5454;;;Mobile and Ubiquitous Computing;;;4;;;;;;;;;;;;
CS5555;;;Health Tech, Data, & Systems;;;3-4;;;;;;;;;;;;
CS5620;;;Introduction to Computer Graphics;;;3;;;Fall.;;;;;; Prequisites: CS 2110.;;;For description, see CS 4620.
CS5621;;;Computer Graphics Practicum;;;2;;;Fall.;;;;;; Prerequisite or corequisite: CS 5620.;;;Provides CS 4620students with hands-on experience in computer graphics programming on modern graphics hardware. A semester-long project involves building a substantial interactive 3D system. The course uses Java and OpenGL for code development.
CS5625;;;Interactive Computer Graphics;;;4;;;Spring.;;;;;; Prerequisite: CS 4620/CS 5620.;;;Methods for interactive computer graphics, targeting applications including games, visualization, design, and immersive environments. Introduces students to state-of-the-art interactive techniques and programmable shading. Students develop a game engine for their final project using Java and GLSL.
CS5643;;;Physically Based Animation for Computer Graphics;;;4;;;Spring.;;;;;; Prerequisite: CS 4620/CS 5620  or permission of instructor.;;;Introduces students to common physically based modeling techniques for animation of virtual characters, fluids and gases, rigid and deformable solids, and other systems.
CS5660;;;Signal Processing;;;3;;;Fall.;;;;;; Prerequisite: Some familiarity with linear algebra and statistics (at the level taught in a freshman course), or permission of instructor.;;;Prediction, smoothing and filtering of 1D signals, with an emphasis on data from mobile devices (e.g. accelerometry, audio, GPS). Fundamentals of time series analysis. Image analysis and enhancement techniques, including deblurring, registration, segmentation and recognition. Methods that scale to very large image collections. Programming in Matlab, Octave or Python.
CS5670;;;Introduction to Computer Vision;;;4;;;Spring.;;;;;; Prerequisites: CS 2110, CS 2800.;;;An in-depth introduction to computer vision. The goal of computer vision is to compute properties of our world-the 3D shape of an environment, the motion of objects, the names of people or things-through analysis of digital images or videos. The course covers a range of topics, including 3D reconstruction, image segmentation, object recognition, and vision algorithms for the Internet, as well as key algorithmic and optimization techniques, such as graph cuts and non-linear least squares. This course emphasizes hands-on experience with computer vision, with several large programming projects.
CS5722;;;Heuristic Methods for Optimization;;;3-4;;;;;;;;;;;;
CS5724;;;Evolutionary Computation;;;4;;;;;;;;;;;;
CS5740;;;Introduction to Natural Language Processing;;;4;;;Spring.;;;;;; Prequisite: CS 2110.;;;For description, see CS 4740.
CS5752;;;Robotic Manipulation;;;4;;;;;;;;;;;;No description available.
CS5780;;;Machine Learning;;;4;;;Fall.;;;;;; Prequisite: CCS 2110/ENGRD 2110or CS 2112/CS 2112and CS 2800, or basic probability theory, and basic knowledge of linear algebra.;;;For description, see CS 4780.
CS5785;;;Modern Analytics;;;4;;;Spring.;;;;;; Prerequisites: CS 2800or the equivalent plus basic familiarity with Matlab or Python, or permission of the instructor.;;;Learn and apply key concepts of modeling, analysis and validation from machine learning, data mining and signal processing to analyze and extract meaning from data. Implement algorithms and perform experiments on images, text, audio and mobile sensor measurements. Gain working knowledge of supervised and unsupervised techniques including classification, regression, clustering, feature selection, and dimensionality reduction.
CS5786;;;Machine Learning for Data Science;;;4;;;;;;;;;;;;No description available.
CS5840;;;Algorithms for Markets;;;4;;;;;;;;;;;;No description available.
CS5860;;;Introduction to Formal Methods;;;4;;;Fall.;;;;;; Prerequisites: CS 2110or CS 3110or equivalent and CS 2800or equivalent.;;;This course introduces the basic methods of specifying programs and reasoning about them in programming logics, including techniques such as formal logical proofs, correct code synthesis, model checking, type theory specifications, and methods of reasoning about concurrent programs. These methods and the software tools that help apply them, such as logical programming environments, decision procedures, software model checkers, and interactive theorem provers, have become essential to both the hardware and software industries in the production of reliable and secure systems.
CS5998;;;Master of Engineering Internship;;;1;;;Fall.;;;;;;;;;Off-campus internship with industry in which a student gains knowledge and experience in the field of computer science.
CS5999;;;Master of Engineering Project;;;1-6;;;Fall, spring.;;;;;;;;;Independent or group project under the direction of a CS field member or researcher. Projects involve the development of a computer science application (software or hardware) useful in exploring and/or solving an engineering problem with a computer science focus.
CS6110;;;Advanced Programming Languages;;;4;;;Spring.;;;;;;;;;Study of programming paradigms: functional, imperative, concurrent, and logic programming. Models of programming languages, including the lambda calculus. Type systems, polymorphism, modules, and other object-oriented constructs. Program transformations, programming logic, and applications to programming methodology.
CS6115;;;Certified Software Systems;;;4;;;;;;;;;;;;No description available.
CS6117;;;Category Theory for Computer Scientists;;;4;;;;;;;;;;;;No description available.
CS6360;;;Educational Technology;;;3;;;;;;;;;;;;No description available.
CS6410;;;Advanced Systems;;;4;;;;;;;;;;;;
CS6431;;;Security and Privacy Technologies;;;4;;;Fall.;;;;;;;;;Through their influence in systems ranging from automobiles to implantable medical devices to social networks, computer security and privacy touch our lives in ever more diverse and palpable ways. In this course, students explore select topics, both social ones such as the ethics of hacking, and technical ones, such as the use of cryptography. Students seek to understand these concepts in the wild through the study of current events, products and services, and startup ideas. The focus of the course is less on specific skills than on a technical and social understanding of how and why security and privacy matter, how to think adversarially, and how (and how not) to design systems and products.
CS6644;;;Modeling the World;;;3;;;Fall.;;;;;; Prerequisites: CS 4620/CS 5620 or CS 4670/CS 5670, or equivalent course and permission of instructor.;;;In recent years, there has been an explosion of visual images and video  content captured by novices and professionals alike, and shared on  community photo collections. These images capture the rich range of  shapes, materials, and lighting in the world. We study how this content  is being used to build comprehensive visual models of the world. We  cover image-based modeling, lighting, and rendering algorithms; 3D  reconstruction algorithms; and acquisition and capture of geometry,  material, and lighting.
CS6742;;;Natural Language Processing and Social Interaction;;;3;;;Fall.;;;;;; Prerequisites: CS 2110 or equivalent programming experience, a course in artificial intelligence or any relevant subfield (e.g., NLP, information retrieval, machine learning).;;;More and more of life is now manifested online, and many of the digital traces that are left by human activity are increasingly recorded in natural-language format. This research-oriented course examines the opportunities for natural language processing to contribute to the analysis and facilitation of socially embedded processes. Possible topics include sentiment analysis, learning social-network structure, analysis of text in political or legal domains, review aggregation systems, analysis of online conversations, and text categorization with respect to psychological categories.
CS6751;;;Introduction to Robotic Mobile Manipulation;;;4;;;;;;;;;;;;No description available.
CS6764;;;Reasoning about Knowledge;;;4;;;Spring.;;;;;; Prerequisites: mathematical maturity and acquaintance with propositional logic.;;;Knowledge plays a crucial role in distributed systems, game theory, and artificial intelligence. Material examines formalizing reasoning about knowledge and the extent to which knowledge is applicable to those areas. Issues include common knowledge, knowledge-based programs, applying knowledge to analyzing distributed systems, attainable states of knowledge, modeling resource-bounded reasoning, and connections to game theory.
CS6780;;;Advanced Machine Learning;;;4;;;Spring.;;;;;; Prerequisites: programming skills (e.g., CS 2110 or CS 3110) and basic knowledge of linear algebra and probability theory (e.g., CS 2800).;;;Gives a graduate-level introduction to machine learning and statistical pattern recognition and in-depth coverage of new and advanced methods in machine learning. Emphasizes approaches with practical relevance and discusses a number of recent applications of machine learning, such as robotics, data mining, computer vision, text and web data processing. An open research project is a major part of the course. Topics include supervised learning (generative/ discriminative learning, bagging/boosting); unsupervised learning (kNN, clustering, dimensionality reduction); online learning; robot learning (reinforcement learning, kalman filters); introduction to graphical models. Masters students are encouraged to take the course.
CS6783;;;Machine Learning Theory;;;4;;;;;;;;;;;;No description available.
CS6788;;;Advanced Topic Modeling;;;3;;;;;;;;;;;;No description available.
CS6820;;;Analysis of Algorithms;;;4;;;Fall.;;;;;; Prerequisite: CS 4820 or graduate standing.;;;Methodology for developing and analyzing efficient algorithms. Understanding the inherent complexity of natural problems via polynomial-time algorithms, advanced data structures, randomized algorithms, approximation algorithms, and NP-completeness. Additional topics may include algebraic and number theoretic algorithms, circuit lower bounds, online algorithms, or algorithmic game theory.
CS6825;;;The Science Base for the Information Age;;;4;;;Fall.;;;;;;;;;Covers the evolving science base that supports the flow of ideas in scientific literature, the evolution of social groups in networks, and the extraction of information from the World Wide Web and other unstructured and noisy datasets.
CS6830;;;Cryptography;;;4;;;;;;;;;;;;
CS7090;;;Computer Science Colloquium;;;1;;;Fall, spring.;;;;;;;;;Weekly meeting for the discussion and study of important topics in the field.
CS7190;;;Seminar in Programming Languages;;;1;;;Fall, spring.;;;;;; Prerequisite: CS 6110 or permission of instructor.;;;No description available.
CS7192;;;Seminar in Programming Refinement Logics;;;1;;;Fall.;;;;;;;;;Topics in programming logics, possibly including type theory, constructive logic, decision procedures, heuristic methods, extraction of code from proofs, and the design of proof-development and problem-solving systems.
CS7290;;;Seminar on Scientific Computing and Numerics;;;1;;;Fall, spring.;;;;;;;;;Talks on various methods in scientific computing, the analysis of their convergence properties and computational efficiency, and their adaptation to specific applications.
CS7490;;;Systems Research Seminar;;;1;;;Fall, spring.;;;;;;;;;No description available.
CS7594;;;Seminar on Computational Issues in Health and Medicine;;;1;;;Fall.;;;;;;;;;An overview of computational issues that arise in the clinical practice of medicine. Topics include the role of IT in clinical practice; medical imaging problems in CT and MR; data mining; clinical decision support; workflow optimization; electronic medical records and health care IT standards. Lectures are given primarily by attending physicians from the Department of Radiology at Weill Cornell Medical College. Open to students at all levels.
CS7670;;;Special Topics in Computer Vision;;;1;;;Fall, spring.;;;;;;;;;Informal weekly seminar in which current topics in computer vision are discussed.
CS7690;;;Computer Graphics Seminar;;;1;;;Fall, spring.;;;;;;;;;No description available.
CS7790;;;Seminar in Artificial Intelligence;;;1;;;Fall, spring.;;;;;;;;;No description available.
CS7794;;;Seminar in Natural Language Understanding;;;1;;;;;;;;;;;;
CS7890;;;Seminar in Theory of Algorithms and Computing;;;1;;;Fall, spring.;;;;;;;;;No description available.
CS7893;;;Cryptography Seminar;;;1;;;Fall, spring.;;;;;;;;;Seminar for discussing recent or classical papers in cryptography.
CS7999;;;Independent Research;;;1-15;;;Fall, spring.;;;;;;;;;Independent research for CS PhD students who have not yet passed their A-exam.
CS9999;;;Thesis Research;;;1-15;;;Fall, spring.;;;;;;;;;Doctoral research.
